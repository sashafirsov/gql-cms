#!/bin/bash
# jwt_keys.sh
# Generates RSA key pair for JWT token signing
# Keys are stored in .env file as JWT_PRIVATE_KEY and JWT_PUBLIC_KEY

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
ENV_FILE="$PROJECT_ROOT/.env"

echo "üîê Generating JWT RSA key pair..."

# Create temporary files for keys
TEMP_PRIVATE=$(mktemp)
TEMP_PUBLIC=$(mktemp)

# Generate private key (2048-bit RSA)
openssl genrsa -out "$TEMP_PRIVATE" 2048 2>/dev/null

# Extract public key from private key
openssl rsa -in "$TEMP_PRIVATE" -pubout -out "$TEMP_PUBLIC" 2>/dev/null

# Read keys and escape for .env format (single line with \n)
PRIVATE_KEY=$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' "$TEMP_PRIVATE")
PUBLIC_KEY=$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' "$TEMP_PUBLIC")

# Check if .env exists, create if not
if [ ! -f "$ENV_FILE" ]; then
    echo "üìù Creating .env file..."
    touch "$ENV_FILE"
fi

# Remove existing JWT keys from .env if present
sed -i.bak '/^JWT_PRIVATE_KEY=/d' "$ENV_FILE" 2>/dev/null || true
sed -i.bak '/^JWT_PUBLIC_KEY=/d' "$ENV_FILE" 2>/dev/null || true
rm -f "$ENV_FILE.bak"

# Append new keys to .env
echo "" >> "$ENV_FILE"
echo "# JWT Keys (generated by bin/jwt_keys.sh)" >> "$ENV_FILE"
echo "JWT_PRIVATE_KEY=\"$PRIVATE_KEY\"" >> "$ENV_FILE"
echo "JWT_PUBLIC_KEY=\"$PUBLIC_KEY\"" >> "$ENV_FILE"

# Clean up temporary files
rm -f "$TEMP_PRIVATE" "$TEMP_PUBLIC"

echo "‚úÖ JWT keys generated and saved to .env"
echo "‚ö†Ô∏è  Keep .env file secure and never commit it to version control"
